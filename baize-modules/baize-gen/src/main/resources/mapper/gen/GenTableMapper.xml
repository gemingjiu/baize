<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.baize.gen.mapper.GenTableMapper">

    <resultMap type="com.baize.gen.entity.GenTable" id="GenTableResult">
        <id     property="id"        column="id"/>
        <result property="tableName"      column="table_name"        />
        <result property="tableComment"   column="table_comment"     />
        <result property="relationTable"   column="relation_table"    />
        <result property="relationFkName" column="relation_fk_name" />
        <result property="className"      column="class_name"        />
        <result property="tplCategory"    column="tpl_category"      />
        <result property="viewType"    column="view_type"      />
        <result property="packageName"    column="package_name"      />
        <result property="moduleName"     column="module_name"       />
        <result property="businessName"   column="business_name"     />
        <result property="functionName"   column="function_name"     />
        <result property="author" column="author"   />
        <result property="genType"        column="gen_type"          />
        <result property="genPath"        column="gen_path"          />
        <result property="options"        column="options"           />
        <result property="createdBy"       column="created_by"         />
        <result property="createdTime"     column="created_time"       />
        <result property="modifiedBy"       column="modified_by"         />
        <result property="modifiedTime"     column="modified_time"       />
        <result property="remark"         column="remark"            />
        <collection  property="columns"  javaType="java.util.List"  resultMap="GenTableColumnResult" />
    </resultMap>

    <resultMap type="com.baize.gen.entity.GenTableColumn" id="GenTableColumnResult">
        <id     property="id"       column="id"      />
        <result property="tableId"        column="table_id"       />
        <result property="columnName"     column="column_name"    />
        <result property="columnComment"  column="column_comment" />
        <result property="columnType"     column="column_type"    />
        <result property="javaType"       column="java_type"      />
        <result property="javaField"      column="java_field"     />
        <result property="pk"           column="pk"          />
        <result property="increment"    column="increment"   />
        <result property="required"     column="required"    />
        <result property="insert"       column="insert"      />
        <result property="edit"         column="edit"        />
        <result property="list"         column="list"        />
        <result property="query"        column="query"       />
        <result property="queryType"      column="query_type"     />
        <result property="visibleType"       column="visible_type"      />
        <result property="dictType"       column="dict_type"      />
        <result property="sort"           column="sort"           />
        <result property="createdBy"       column="created_by"      />
        <result property="createdTime"     column="created_time"    />
        <result property="modifiedBy"       column="modified_by"      />
        <result property="modifiedTime"     column="modified_time"    />
    </resultMap>

    <sql id="selectGenTableVo">
        select id, table_name, table_comment, relation_table, relation_fk_name, class_name, tpl_category, tpl_category, package_name, module_name, business_name, function_name, author, gen_type, gen_path, options, created_by, created_time, modified_by, modified_time, remark from gen_table
    </sql>

    <select id="selectGenTableList" parameterType="com.baize.gen.entity.GenTable" resultMap="GenTableResult">
        <include refid="selectGenTableVo"/>
        <where>
            <if test="tableName != null and tableName != ''">
                AND lower(table_name) like lower(concat('%', #{tableName}, '%'))
            </if>
            <if test="tableComment != null and tableComment != ''">
                AND lower(table_comment) like lower(concat('%', #{tableComment}, '%'))
            </if>
            <if test="params.beginTime != null and params.beginTime != ''"><!-- 开始时间检索 -->
                AND TO_CHAR(created_time,'YYYYMMDD') &gt;= #{params.beginTime}
            </if>
            <if test="params.endTime != null and params.endTime != ''"><!-- 结束时间检索 -->
                AND TO_CHAR(created_time,'YYYYMMDD') &lt;= #{params.endTime}
            </if>
        </where>
    </select>

    <select id="selectDbTableList" parameterType="com.baize.gen.entity.GenTable" resultMap="GenTableResult">
        select tablename as table_name,obj_description(relfilenode,'pg_class') as table_comment  from pg_tables  a, pg_class b
        where a.tablename = b.relname
        and a.tablename not like 'pg%'
        and a.tablename not like 'sql_%'
        and a.tablename not like 'qrtz_%'
        and a.tablename not like 'qrtz_%'
        and a.tablename not like 'gen_%'
        and a.tablename not in (select table_name from gen_table)
        <if test="tableName != null and tableName != ''">
            and lower(a.tablename) like lower(concat('%', #{tableName}, '%'))
        </if>
        <if test="tableComment != null and tableComment != ''">
            and lower(obj_description(relfilenode,'pg_class')) like lower(concat('%', #{tableComment}, '%'))
        </if>
        order by tablename desc
    </select>

    <select id="selectDbTableListByNames" resultMap="GenTableResult">
        select tablename as table_name,obj_description(relfilenode,'pg_class') as table_comment  from pg_tables  a, pg_class b
        where a.tablename = b.relname
        and a.tablename not like 'pg%'
        and a.tablename not like 'sql_%'
        and a.tablename not like 'qrtz_%'
        and a.tablename not like 'qrtz_%'
        and a.tablename not like 'gen_%'
        and a.tablename in
        <foreach collection="array" item="name" open="(" separator="," close=")">
            #{name}
        </foreach>
    </select>

    <select id="selectTableByName" parameterType="String" resultMap="GenTableResult">
        select tablename as table_name,obj_description(relfilenode,'pg_class') as table_comment  from pg_tables  a, pg_class b
        where a.tablename = b.relname
          and a.tablename not like 'pg%'
          and a.tablename not like 'sql_%'
          and a.tablename not like 'qrtz_%'
          and a.tablename not like 'qrtz_%'
          and a.tablename not like 'gen_%'
          and a.tablename = #{tableName}
    </select>

    <select id="selectGenTableById" parameterType="String" resultMap="GenTableResult">
        SELECT t.id, t.table_name, t.table_comment, t.relation_table, t.relation_fk_name, t.class_name, t.tpl_category, t.tpl_category, t.package_name, t.module_name, t.business_name, t.function_name, t.author, t.gen_type, t.gen_path, t.options, t.remark,
               c.id, c.column_name, c.column_comment, c.column_type, c.java_type, c.java_field, c.pk, c.increment, c.required, c.insert, c.edit, c.list, c.query, c.query_type, c.visible_type, c.dict_type, c.sort
        FROM gen_table t
                 LEFT JOIN gen_table_column c ON t.id = c.table_id
        where t.id = #{tableId} order by c.sort
    </select>

    <select id="selectGenTableByName" parameterType="String" resultMap="GenTableResult">
        SELECT t.id, t.table_name, t.table_comment, t.relation_table, t.relation_fk_name, t.class_name, t.tpl_category, t.tpl_category, t.package_name, t.module_name, t.business_name, t.function_name, t.author, t.gen_type, t.gen_path, t.options, t.remark,
               c.id, c.column_name, c.column_comment, c.column_type, c.java_type, c.java_field, c.pk, c.increment, c.required, c.insert, c.edit, c.list, c.query, c.query_type, c.visible_type, c.dict_type, c.sort
        FROM gen_table t
                 LEFT JOIN gen_table_column c ON t.id = c.table_id
        where t.table_name = #{tableName} order by c.sort
    </select>

    <select id="selectGenTableAll" parameterType="String" resultMap="GenTableResult">
        SELECT t.id, t.table_name, t.table_comment, t.relation_table, t.relation_fk_name, t.class_name, t.tpl_category, t.tpl_category, t.package_name, t.module_name, t.business_name, t.function_name, t.author, t.options, t.remark,
               c.id, c.column_name, c.column_comment, c.column_type, c.java_type, c.java_field, c.pk, c.increment, c.required, c.insert, c.edit, c.list, c.query, c.query_type, c.visible_type, c.dict_type, c.sort
        FROM gen_table t
                 LEFT JOIN gen_table_column c ON t.id = c.table_id
        order by c.sort
    </select>

    <insert id="insertGenTable" parameterType="com.baize.gen.entity.GenTable">
        insert into gen_table (
        <if test="id !=null and id != ''" >id,</if>
        <if test="tableName != null">table_name,</if>
        <if test="tableComment != null and tableComment != ''">table_comment,</if>
        <if test="className != null and className != ''">class_name,</if>
        <if test="tplCategory != null and tplCategory != ''">tpl_category,</if>
        <if test="viewType != null and viewType != ''">view_type,</if>
        <if test="packageName != null and packageName != ''">package_name,</if>
        <if test="moduleName != null and moduleName != ''">module_name,</if>
        <if test="businessName != null and businessName != ''">business_name,</if>
        <if test="functionName != null and functionName != ''">function_name,</if>
        <if test="author != null and author != ''">author,</if>
        <if test="genType != null and genType != ''">gen_type,</if>
        <if test="genPath != null and genPath != ''">gen_path,</if>
        <if test="remark != null and remark != ''">remark,</if>
        <if test="createdBy != null and createdBy != ''">created_by,</if>
        created_time
        )values(
        <if test="id !=null and id != ''" >#{id},</if>
        <if test="tableName != null">#{tableName},</if>
        <if test="tableComment != null and tableComment != ''">#{tableComment},</if>
        <if test="className != null and className != ''">#{className},</if>
        <if test="tplCategory != null and tplCategory != ''">#{tplCategory},</if>
        <if test="viewType != null and viewType != ''">#{viewType},</if>
        <if test="packageName != null and packageName != ''">#{packageName},</if>
        <if test="moduleName != null and moduleName != ''">#{moduleName},</if>
        <if test="businessName != null and businessName != ''">#{businessName},</if>
        <if test="functionName != null and functionName != ''">#{functionName},</if>
        <if test="author != null and author != ''">#{author},</if>
        <if test="genType != null and genType != ''">#{genType},</if>
        <if test="genPath != null and genPath != ''">#{genPath},</if>
        <if test="remark != null and remark != ''">#{remark},</if>
        <if test="createdBy != null and createdBy != ''">#{createdBy},</if>
        now()
        )
    </insert>

    <update id="updateGenTable" parameterType="com.baize.gen.entity.GenTable">
        update gen_table
        <set>
            <if test="tableName != null">table_name = #{tableName},</if>
            <if test="tableComment != null and tableComment != ''">table_comment = #{tableComment},</if>
            <if test="relationTable != null">relation_table = #{relationTable},</if>
            <if test="relationFkName != null">relation_fk_name = #{relationFkName},</if>
            <if test="className != null and className != ''">class_name = #{className},</if>
            <if test="author != null and author != ''">author = #{author},</if>
            <if test="genType != null and genType != ''">gen_type = #{genType},</if>
            <if test="genPath != null and genPath != ''">gen_path = #{genPath},</if>
            <if test="tplCategory != null and tplCategory != ''">tpl_category = #{tplCategory},</if>
            <if test="tplWebType != null and tplWebType != ''">tpl_category = #{tplWebType},</if>
            <if test="packageName != null and packageName != ''">package_name = #{packageName},</if>
            <if test="moduleName != null and moduleName != ''">module_name = #{moduleName},</if>
            <if test="businessName != null and businessName != ''">business_name = #{businessName},</if>
            <if test="functionName != null and functionName != ''">function_name = #{functionName},</if>
            <if test="options != null and options != ''">options = #{options},</if>
            <if test="modifiedBy != null and modifiedBy != ''">modified_by = #{modifiedBy},</if>
            <if test="remark != null">remark = #{remark},</if>
            modified_time = now()
        </set>
        where id = #{id}
    </update>

    <delete id="deleteGenTableByIds" parameterType="String">
        delete from gen_table where id in
        <foreach collection="array" item="tableId" open="(" separator="," close=")">
            #{tableId}
        </foreach>
    </delete>

</mapper>