<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.baize.system.mapper.SysDeptMapper">

	<resultMap type="com.baize.system.api.domain.SysDept" id="SysDeptResult">
		<id     property="id"     column="id"     />
		<result property="parentId"   column="parent_id"   />
		<result property="ancestors"  column="ancestors"   />
		<result property="deptName"   column="dept_name"   />
		<result property="sort"   column="sort"   />
		<result property="leader"     column="leader"      />
		<result property="phone"      column="phone"       />
		<result property="email"      column="email"       />
		<result property="status"     column="status"      />
		<result property="deleted"    column="deleted"    />
		<result property="parentName" column="parent_name" />
		<result property="createdBy"   column="created_by"   />
		<result property="createdTime" column="created_time" />
		<result property="modifiedBy"   column="modified_by"   />
		<result property="modifiedTime" column="modified_time" />
	</resultMap>

	<sql id="selectDeptVo">
        select d.id, d.parent_id, d.ancestors, d.dept_name, d.sort, d.leader, d.phone, d.email, d.status, d.deleted, d.created_by, d.created_time
        from sys_dept d
    </sql>

	<select id="selectDeptList" parameterType="com.baize.system.api.domain.SysDept" resultMap="SysDeptResult">
        <include refid="selectDeptVo"/>
        where d.deleted = '0'
		<if test="id != null and id != ''">
			AND id = #{id}
		</if>
        <if test="parentId != null and parentId != ''">
			AND parent_id = #{parentId}
		</if>
		<if test="deptName != null and deptName != ''">
			AND dept_name like concat('%', #{deptName}, '%')
		</if>
		<if test="status != null and status != ''">
			AND status = #{status}
		</if>
		<!-- 数据范围过滤 -->
		${params.dataScope}
		order by d.parent_id, d.sort
    </select>

    <select id="selectDeptListByRoleId" resultType="String">
		select d.id
		from sys_dept d
            left join sys_role_dept rd on d.id = rd.dept_id
        where rd.role_id = #{id}
            <if test="deptCheckStrictly">
              and d.id not in (select d.parent_id from sys_dept d inner join sys_role_dept rd on d.id = rd.dept_id and rd.role_id = #{id})
            </if>
		order by d.parent_id, d.sort
	</select>

    <select id="selectDeptById" parameterType="String" resultMap="SysDeptResult">
		<include refid="selectDeptVo"/>
		where id = #{id}
	</select>

    <select id="checkDeptExistUser" parameterType="String" resultType="int">
		select count(1) from sys_user where id = #{id} and deleted = '0'
	</select>

	<select id="hasChildByid" parameterType="String" resultType="int">
		select count(1) from sys_dept
		where deleted = '0' and parent_id = #{id} limit 1
	</select>

	<select id="selectChildrenDeptById" parameterType="String" resultMap="SysDeptResult">
		select * from sys_dept where #{id} = ANY(string_to_array(ancestors,','))
	</select>

	<select id="selectNormalChildrenDeptById" parameterType="String" resultType="int">
		select count(*) from sys_dept where status = 0 and deleted = '0' and #{id} = ANY(string_to_array(ancestors,','))
	</select>

	<select id="checkDeptNameUnique" resultMap="SysDeptResult">
	    <include refid="selectDeptVo"/>
		where dept_name=#{deptName} and parent_id = #{parentId} and deleted = '0' limit 1
	</select>

    <insert id="insertDept" parameterType="com.baize.system.api.domain.SysDept">
 		insert into sys_dept(
 			<if test="id != null and id != ''">id,</if>
 			<if test="parentId != null and parentId != ''">parent_id,</if>
 			<if test="deptName != null and deptName != ''">dept_name,</if>
 			<if test="ancestors != null and ancestors != ''">ancestors,</if>
 			<if test="sort != null">sort,</if>
 			<if test="leader != null and leader != ''">leader,</if>
 			<if test="phone != null and phone != ''">phone,</if>
 			<if test="email != null and email != ''">email,</if>
 			<if test="status != null">status,</if>
 			<if test="createdBy != null and createdBy != ''">created_by,</if>
 			created_time
 		)values(
 			<if test="id != null and id != ''">#{id},</if>
 			<if test="parentId != null and parentId != ''">#{parentId},</if>
 			<if test="deptName != null and deptName != ''">#{deptName},</if>
 			<if test="ancestors != null and ancestors != ''">#{ancestors},</if>
 			<if test="sort != null">#{sort},</if>
 			<if test="leader != null and leader != ''">#{leader},</if>
 			<if test="phone != null and phone != ''">#{phone},</if>
 			<if test="email != null and email != ''">#{email},</if>
 			<if test="status != null">#{status},</if>
 			<if test="createdBy != null and createdBy != ''">#{createdBy},</if>
 			now()
 		)
	</insert>

	<update id="updateDept" parameterType="com.baize.system.api.domain.SysDept">
 		update sys_dept
 		<set>
 			<if test="parentId != null and parentId != ''">parent_id = #{parentId},</if>
 			<if test="deptName != null and deptName != ''">dept_name = #{deptName},</if>
 			<if test="ancestors != null and ancestors != ''">ancestors = #{ancestors},</if>
 			<if test="sort != null">sort = #{sort},</if>
 			<if test="leader != null">leader = #{leader},</if>
 			<if test="phone != null">phone = #{phone},</if>
 			<if test="email != null">email = #{email},</if>
			<if test="revision != null">revision = #{revision}+1,</if>
 			<if test="status != null and status != ''">status = #{status},</if>
 			<if test="modifiedBy != null and modifiedBy != ''">modified_by = #{modifiedBy},</if>
 			modified_time = now()
 		</set>
 		where id = #{id}
	</update>

	<update id="updateDeptChildren" parameterType="java.util.List">
	    update sys_dept set ancestors =
	    <foreach collection="depts" item="item" index="index"
	        separator=" " open="case id" close="end">
	        when #{item.id} then #{item.ancestors}
	    </foreach>
	    where id in
	    <foreach collection="depts" item="item" index="index"
	        separator="," open="(" close=")">
	        #{item.id}
	    </foreach>
	</update>

	<update id="updateDeptStatusNormal" parameterType="String">
 	    update sys_dept set status = '0' where id in
 	    <foreach collection="array" item="id" open="(" separator="," close=")">
        	#{id}
        </foreach>
	</update>

	<delete id="deleteDeptById" parameterType="String">
		update sys_dept set deleted = '2' where id = #{id}
	</delete>

</mapper> 